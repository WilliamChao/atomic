#version 330 core

#pragma include("Common.glslh")

layout(std140) uniform bloom_states
{
    BloomStates u_Bloom;
};

#ifdef GLSL_VS
ia_out(GLSL_POSITION)           vec4 ia_VertexPosition;
#endif
#if defined(GLSL_VS) || defined(GLSL_PS)
vs_out vec2 vs_Texcoord;
#endif

#if defined(GLSL_VS)

void main()
{
    vec2 pos[16] = vec2[16](
        vec2(0.0, 1.0), vec2(-1.0, 1.0), vec2(-1.0, -1.0), vec2(0.0,-1.0),
        vec2(0.5, 0.0), vec2(0.0, 0.0), vec2(0.0, -1.0), vec2(0.5,-1.0),
        vec2(0.75, -0.5), vec2(0.5, -0.5), vec2(0.5, -1.0), vec2(0.75,-1.0),
        vec2(0.875, -0.75), vec2(0.75, -0.75), vec2(0.75, -1.0), vec2(0.875,-1.0) );
    vec2 tex[4] = vec2[4](vec2(1.0, 1.0), vec2(0.0, 1.0), vec2(0.0, 0.0), vec2(1.0, 0.0));
    int indices[24] = int[24](
        0,1,2, 2,3,0,
        4,5,6, 6,7,4,
        8,9,10, 10,11,8,
        12,13,14, 14,15,12 );

    int vi = indices[gl_InstanceID*6 + gl_VertexID];
    vs_Texcoord = tex[vi%4];
    gl_Position = vec4(pos[vi], 0.0, 1.0);
}


#elif defined(GLSL_PS)

uniform vec2 u_TexcoordMin;
uniform vec2 u_TexcoordMax;
const float Weight[8] = float[8](0.1284, 0.1221, 0.1051, 0.0819, 0.0577, 0.0368, 0.0212, 0.0111);

ps_out(0) vec4 ps_FragColor;


vec4 Luminance()
{
    vec4 color = texture(u_ColorBuffer, vs_Texcoord);
    color = pow(max(color-vec4(0.5), vec4(0.0))*2.0, vec4(2.0));
    color.w += 0.5;
    return color;
}

vec4 HorizontalBlur()
{
    vec4 color;
    for(int i=0; i<8; ++i) {
        vec2 gap = vec2(float(i)*u_RS.RcpScreenSize.x, 0.0);
        color += (texture(u_ColorBuffer, clamp(vs_Texcoord+gap, u_TexcoordMin, u_TexcoordMax)) + 
                  texture(u_ColorBuffer, clamp(vs_Texcoord-gap, u_TexcoordMin, u_TexcoordMax))) * Weight[i];
    }
    return color;
}

vec4 VerticalBlur()
{
    vec4 color;
    for(int i=0; i<8; ++i) {
        vec2 gap = vec2(0.0, float(i)*u_RS.RcpScreenSize.y);
        color += (texture(u_ColorBuffer, clamp(vs_Texcoord+gap, u_TexcoordMin, u_TexcoordMax)) + 
                  texture(u_ColorBuffer, clamp(vs_Texcoord-gap, u_TexcoordMin, u_TexcoordMax))) * Weight[i];
    }
    return color;
}

vec4 Composite()
{
    return texture(u_ColorBuffer, vs_Texcoord) * 0.75;
}


void main()
{
#if defined(GLSL_BLOOM_LUMINANCE)
    ps_FragColor = Luminance();
#elif defined(GLSL_BLOOM_HBLUR)
    ps_FragColor = HorizontalBlur();
#elif defined(GLSL_BLOOM_VBLUR)
    ps_FragColor = VerticalBlur();
#elif defined(GLSL_BLOOM_COMPOSITE)
    ps_FragColor = Composite();
#endif
}

#endif
