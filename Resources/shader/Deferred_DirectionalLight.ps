#version 330 core

    

struct  RenderStates
{
    mat4 ModelViewProjectionMatrix;
    vec4 CameraPosition;
    vec4 CameraDirection;
    vec4 Color;

    vec2 ScreenTexcoord;
    vec2 ScreenSize;
    vec2 RcpScreenSize;
    float AspectRatio;
    float RcpAspectRatio;
    float Frame;
    int Level;
    int ShowMultiresolution;
};

struct  FXAAParams
{
    vec4 fxaaConsolePosPos;
    vec4 fxaaConsoleRcpFrameOpt;
    vec4 fxaaConsoleRcpFrameOpt2;
    vec4 fxaaConsole360RcpFrameOpt2;
    vec4 fxaaConsole360ConstDir;
    vec2 fxaaQualityRcpFrame;
    float fxaaQualitySubpix;
    float fxaaQualityEdgeThreshold;
    float fxaaQualityEdgeThresholdMin;
    float fxaaConsoleEdgeSharpness;
    float fxaaConsoleEdgeThreshold;
    float fxaaConsoleEdgeThresholdMin;
};

struct  FadeParams
{
    vec4 Color;
};

struct  FillParams
{
    vec4 Color;
};

struct  MultiresolutionParams
{
    ivec4 Level;
    vec4 Threshold;
};

struct  DebugShowBufferParams
{
    vec2 BottomLeft; 
    vec2 UpperRight; 
    vec2 ColorRange; 
};

    layout(std140) uniform render_states
    {
        RenderStates u_RS;
    };

    uniform sampler2D u_ColorBuffer;
    uniform sampler2D u_NormalBuffer;
    uniform sampler2D u_PositionBuffer;
    uniform sampler2D u_GlowBuffer;
    uniform sampler2D u_BackBuffer;
    uniform sampler2D u_RandomBuffer;
    uniform sampler2D u_ParamBuffer;

    

    

    

float SmoothInterpolation2(float v)
{
    return v < 0.5 ? 2.0*v*v : -1.0+4.0*v-2*v*v;
}

float SmoothInterpolation(float v, int n)
{
    return v < 0.5 ? pow(2.0*v, n) : 1.0 - pow(2.0-2.0*v, n);
}

in vec2 vs_Texcoord;
in vec4 vs_LightDirection;
in vec4 vs_LightColor;
in vec4 vs_LightAmbient;
in vec4 vs_VertexPositionMVP;

layout(location=0) out   vec4 ps_FragColor;

void main()
{
    vec2 coord = vs_Texcoord;

    vec4 AS         = texture(u_ColorBuffer, coord);
    vec4 NS         = texture(u_NormalBuffer, coord);
    vec3 Albedo     = AS.rgb;
    float Shininess = AS.a;
    float Fresnel   = NS.a;
    vec3 Normal     = NS.xyz;
    vec3 FragPos    = texture(u_PositionBuffer, coord).xyz;
    vec3 EyePos     = u_RS.CameraPosition.xyz;
    vec3 EyeDir     = normalize(EyePos - FragPos);
    
    vec3 LightColor = vs_LightColor.rgb;
    vec3 LightDir   = -vs_LightDirection.xyz;

    vec3 h          = normalize(EyeDir + LightDir);
    float nh        = max(dot(Normal, h), 0.0);
    float Specular  = pow(nh, Shininess);
    float Intensity = max(dot(Normal, LightDir), 0.0);

    vec3 Ambient    = vs_LightAmbient.rgb;
    vec4 Result = vec4(0.0, 0.0, 0.0, 1.0);
    Result.rgb += vs_LightColor.rgb * (Ambient + Albedo * Intensity);
    Result.rgb += vs_LightColor.rgb * Specular;
    Result.rgb += texture(u_GlowBuffer, coord).rgb;

    ps_FragColor = Result;
}

