#version 330 core

    
    

struct  RenderStates
{
    mat4 ModelViewProjectionMatrix;
    vec4 CameraPosition;
    vec4 CameraDirection;
    vec4 Color;

    vec2 ScreenTexcoord;
    vec2 ScreenSize;
    vec2 RcpScreenSize;
    float AspectRatio;
    float RcpAspectRatio;
    float Frame;
    int Level;
    int ShowMultiresolution;
};

struct  FXAAParams
{
    vec4 fxaaConsolePosPos;
    vec4 fxaaConsoleRcpFrameOpt;
    vec4 fxaaConsoleRcpFrameOpt2;
    vec4 fxaaConsole360RcpFrameOpt2;
    vec4 fxaaConsole360ConstDir;
    vec2 fxaaQualityRcpFrame;
    float fxaaQualitySubpix;
    float fxaaQualityEdgeThreshold;
    float fxaaQualityEdgeThresholdMin;
    float fxaaConsoleEdgeSharpness;
    float fxaaConsoleEdgeThreshold;
    float fxaaConsoleEdgeThresholdMin;
};

struct  FadeParams
{
    vec4 Color;
};

struct  FillParams
{
    vec4 Color;
};

struct  MultiresolutionParams
{
    ivec4 Level;
    vec4 Threshold;
};

struct  DebugShowBufferParams
{
    vec2 BottomLeft; 
    vec2 UpperRight; 
    vec2 ColorRange; 
};

    layout(std140) uniform render_states
    {
        RenderStates u_RS;
    };

    uniform sampler2D u_ColorBuffer;
    uniform sampler2D u_NormalBuffer;
    uniform sampler2D u_PositionBuffer;
    uniform sampler2D u_GlowBuffer;
    uniform sampler2D u_BackBuffer;
    uniform sampler2D u_RandomBuffer;
    uniform sampler2D u_ParamBuffer;

    

    

    

float SmoothInterpolation2(float v)
{
    return v < 0.5 ? 2.0*v*v : -1.0+4.0*v-2*v*v;
}

float SmoothInterpolation(float v, int n)
{
    return v < 0.5 ? pow(2.0*v, n) : 1.0 - pow(2.0-2.0*v, n);
}

in vec4 vs_Params;
in vec4 vs_Outer;
in vec4 vs_Position;

layout(location=0) out   vec4 ps_FragColor;

void main()
{
    const int num_samples = 24;
    vec2 center = (1.0+vs_Position.xy / vs_Position.w)*0.5;
    vec2 outer = (1.0+vs_Outer.xy / vs_Outer.w)*0.5;
    vec2 step = (outer - center) / num_samples;

    vec4 color = vec4(0.0);
    for(int i=0; i<num_samples; ++i) {
        color += texture(u_BackBuffer, center - step*i);
    }
    color /= num_samples;
    color.a = vs_Params.w;
    ps_FragColor = color;
}

