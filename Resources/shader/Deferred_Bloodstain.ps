#version 330 core

    

struct  RenderStates
{
    mat4 ModelViewProjectionMatrix;
    vec4 CameraPosition;
    vec4 CameraDirection;
    vec4 Color;

    vec2 ScreenTexcoord;
    vec2 ScreenSize;
    vec2 RcpScreenSize;
    float AspectRatio;
    float RcpAspectRatio;
    float Frame;
    int Level;
    int ShowMultiresolution;
};

struct  FXAAParams
{
    vec4 fxaaConsolePosPos;
    vec4 fxaaConsoleRcpFrameOpt;
    vec4 fxaaConsoleRcpFrameOpt2;
    vec4 fxaaConsole360RcpFrameOpt2;
    vec4 fxaaConsole360ConstDir;
    vec2 fxaaQualityRcpFrame;
    float fxaaQualitySubpix;
    float fxaaQualityEdgeThreshold;
    float fxaaQualityEdgeThresholdMin;
    float fxaaConsoleEdgeSharpness;
    float fxaaConsoleEdgeThreshold;
    float fxaaConsoleEdgeThresholdMin;
};

struct  FadeParams
{
    vec4 Color;
};

struct  FillParams
{
    vec4 Color;
};

struct  MultiresolutionParams
{
    ivec4 Level;
    vec4 Threshold;
};

struct  DebugShowBufferParams
{
    vec2 BottomLeft; 
    vec2 UpperRight; 
    vec2 ColorRange; 
};

    layout(std140) uniform render_states
    {
        RenderStates u_RS;
    };

    uniform sampler2D u_ColorBuffer;
    uniform sampler2D u_NormalBuffer;
    uniform sampler2D u_PositionBuffer;
    uniform sampler2D u_GlowBuffer;
    uniform sampler2D u_BackBuffer;
    uniform sampler2D u_RandomBuffer;
    uniform sampler2D u_ParamBuffer;

    

    

    

float SmoothInterpolation2(float v)
{
    return v < 0.5 ? 2.0*v*v : -1.0+4.0*v-2*v*v;
}

float SmoothInterpolation(float v, int n)
{
    return v < 0.5 ? pow(2.0*v, n) : 1.0 - pow(2.0-2.0*v, n);
}

in vec4 vs_LightPosition;
in vec4 vs_LightColor;
in vec4 vs_VertexPositionMVP;
in float vs_LightRange;
in float vs_RcpLightRange;

layout(location=0) out   vec4 ps_FragColor;

void main()
{
    vec2 coord;
    coord.x = (1.0 + (vs_VertexPositionMVP.x/vs_VertexPositionMVP.w))*0.5;
    coord.y = (1.0 + (vs_VertexPositionMVP.y/vs_VertexPositionMVP.w))*0.5;
    coord *= u_RS.ScreenTexcoord;

    vec4 PosA       = texture(u_PositionBuffer, coord);
    vec4 NS         = texture(u_NormalBuffer, coord);
    vec3 Normal     = NS.xyz;
    vec3 FragPos    = PosA.xyz;

    vec3  LightColor    = vs_LightColor.rgb;
    vec3  LightPos      = vs_LightPosition.xyz;
    vec3  LightDiff     = vs_LightPosition.xyz - FragPos.xyz;
    float LightDist2    = dot(LightDiff, LightDiff);
    float LightDist     = sqrt(LightDist2);

    float LightAttenuation  = max(vs_LightRange-LightDist, 0.0)*vs_RcpLightRange;
    if(LightAttenuation * PosA.a < 0.01) {
        discard;
    }

    vec4 Result = vec4(0.0, 0.0, 0.0, 120.0);
    Result.rgb += vs_LightColor.rgb;

    ps_FragColor = Result;
}

