#version 330 core

    

struct  RenderStates
{
    mat4 ModelViewProjectionMatrix;
    vec4 CameraPosition;
    vec4 CameraDirection;
    vec4 Color;

    vec2 ScreenTexcoord;
    vec2 ScreenSize;
    vec2 RcpScreenSize;
    float AspectRatio;
    float RcpAspectRatio;
    float Frame;
    int Level;
    int ShowMultiresolution;
};

struct  FXAAParams
{
    vec4 fxaaConsolePosPos;
    vec4 fxaaConsoleRcpFrameOpt;
    vec4 fxaaConsoleRcpFrameOpt2;
    vec4 fxaaConsole360RcpFrameOpt2;
    vec4 fxaaConsole360ConstDir;
    vec2 fxaaQualityRcpFrame;
    float fxaaQualitySubpix;
    float fxaaQualityEdgeThreshold;
    float fxaaQualityEdgeThresholdMin;
    float fxaaConsoleEdgeSharpness;
    float fxaaConsoleEdgeThreshold;
    float fxaaConsoleEdgeThresholdMin;
};

struct  FadeParams
{
    vec4 Color;
};

struct  FillParams
{
    vec4 Color;
};

struct  MultiresolutionParams
{
    ivec4 Level;
    vec4 Threshold;
};

struct  DebugShowBufferParams
{
    vec2 BottomLeft; 
    vec2 UpperRight; 
    vec2 ColorRange; 
};

    layout(std140) uniform render_states
    {
        RenderStates u_RS;
    };

    uniform sampler2D u_ColorBuffer;
    uniform sampler2D u_NormalBuffer;
    uniform sampler2D u_PositionBuffer;
    uniform sampler2D u_GlowBuffer;
    uniform sampler2D u_BackBuffer;
    uniform sampler2D u_RandomBuffer;
    uniform sampler2D u_ParamBuffer;

    

    

    

float SmoothInterpolation2(float v)
{
    return v < 0.5 ? 2.0*v*v : -1.0+4.0*v-2*v*v;
}

float SmoothInterpolation(float v, int n)
{
    return v < 0.5 ? pow(2.0*v, n) : 1.0 - pow(2.0-2.0*v, n);
}

in vec2 vs_Texcoord;

layout(location=0) out vec4 ps_FlagColor;
layout(location=1) out vec4 ps_FragNormal;
layout(location=2) out vec4 ps_FragPosition;
layout(location=3) out vec4 ps_FragGlow;

void main()
{
    const int level = 2;
    const float diff = 0.01;
    ivec2 coord = ivec2(gl_FragCoord.x*0.25, gl_FragCoord.y*0.25);
    vec4 pos1 = texelFetch(u_PositionBuffer, coord+ivec2( 0,0), level);
    vec4 pos2 = texelFetch(u_PositionBuffer, coord+ivec2( 1,0), level);
    vec4 pos3 = texelFetch(u_PositionBuffer, coord+ivec2( 0,1), level);
    if(abs(pos2.w-pos1.w) > diff || abs(pos3.w-pos1.w) > diff) {
        discard;
    }

    gl_FragDepth    = 0.0;
    ps_FlagColor    = texelFetch(u_ColorBuffer, coord, level);
    ps_FragNormal   = texelFetch(u_NormalBuffer, coord, level);
    ps_FragPosition = texelFetch(u_PositionBuffer, coord, level);

    vec4 g = texelFetch(u_GlowBuffer, coord, level);
    if(u_RS.ShowMultiresolution!=0) {
        g = vec4(0.5, 0.0, 0.0, 0.0);
    }
    ps_FragGlow     = g;
}

